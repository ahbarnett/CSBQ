function save_geom(fnam,pan,r,thetaord)
% SAVE_GEOM  write 3D centerline panel quadrature to Dhairya .geom file format
%
% save_geom(fnam,pan,r,thetaord) writes text file fnam in .geom format, using
%  the nodes x in pan struct array, constant radius r, and constant Fourier
%  order thetaord. Overwrites the file. Makes up a unit nx vector if not
%  present in pan. thetaord is optional, will be 0 by default.
%
% To do: get documentation for the .geom format.
%
% Called with no arguments does self-test.

% Barnett 1/12/22
if nargin==0, test_save_geom; return; end
if nargin<4, thetaord=0; end       % dummy value

if ~isfield(pan(1),'tx'), pan = LIquad_panels(pan); end    % add unit tangents

fid = fopen(fnam,'w');
fprintf(fid,'#                        X                         Y                         Z                         r                  orient-x                  orient-y                  orient-z                 ChebOrder              FourierOrder. NB: generated by save_geom.m\n');
for i=1:numel(pan)
  x = pan(i).x;
  p = size(x,2);
  if isfield(pan(i),'nx'), nx=pan(i).nx, else
    d = x(:,end)-x(:,1);           % col vec displacement of this panel
    [~,goodaxis] = min(abs(d));    % 1,2,3 for x,y,or z as good fiduciary
    ax = zeros(3,1); ax(goodaxis) = 1;    % a vaguely transverse direction
    nx = nan(3,p);                 % note nx should be smooth within a panel
    for j=1:p                      % create vec orthog to tangent at each node
      nx(:,j) = cross(ax,pan(i).tx(:,j)); nx(:,j) = nx(:,j)/norm(nx(:,j));
    end
  end
  for j=1:p
    fprintf(fid,'%.16e  ',[x(:,j)', r, nx(:,j)']);
    if j==1, fprintf(fid,'%16d  ',p,thetaord); end
    fprintf(fid,'\n');
  end
end
fclose(fid);


%%%%%%
function test_save_geom   % checks a save -> load cycle
[Z,Zp] = ellipse_map(1,0.5);  % 2x1 ellipse @ generic orient
p = 10;                       % order
npan = 16;
tpan = 2*pi*(0:npan)'/npan;   % pan param breakpoints (first=0, last=2pi)
pan = setup_pans(tpan,p);
pan = map_pans(pan,Z,Zp);
x = horzcat(pan.x);           % save all nodes
r = 0.01;                     % radius, aka eps, arbitrary
thetaord = 12;                % arbitrary
fnam = 'output/ellipse.geom';
save_geom(fnam,pan,r,thetaord);
pan = load_geom(fnam);
x2 = horzcat(pan.x); norm(x-x2)  % check nodes reloaded correctly
showcurve(pan);               % eyeball the nx orientation vecs
